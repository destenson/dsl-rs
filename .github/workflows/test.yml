name: DSL-RS Test Suite

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test - ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          - os: macos-latest
            rust: beta
          - os: windows-latest
            rust: beta

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Rust toolchain
      if: matrix.rust != 'stable'
      run: |
        rustup toolchain install ${{ matrix.rust }} --profile minimal --component rustfmt --component clippy
        rustup default ${{ matrix.rust }}
    
    - name: Install GStreamer (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
          gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
          gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly \
          gstreamer1.0-libav libgstrtspserver-1.0-dev
    
    - name: Install GStreamer (Windows)
      if: runner.os == 'Windows'
      shell: powershell
      run: |
        # Install pkg-config first
        choco install pkgconfiglite -y
        
        # Download and install GStreamer manually since Chocolatey package is broken
        $gstVersion = "1.24.7"
        $gstInstaller = "gstreamer-1.0-msvc-x86_64-$gstVersion.msi"
        $gstDevInstaller = "gstreamer-1.0-devel-msvc-x86_64-$gstVersion.msi"
        
        # Download runtime
        Invoke-WebRequest -Uri "https://gstreamer.freedesktop.org/data/pkg/windows/$gstVersion/msvc/$gstInstaller" -OutFile "$env:TEMP\$gstInstaller"
        # Download development files
        Invoke-WebRequest -Uri "https://gstreamer.freedesktop.org/data/pkg/windows/$gstVersion/msvc/$gstDevInstaller" -OutFile "$env:TEMP\$gstDevInstaller"
        
        # Install silently
        Start-Process msiexec.exe -ArgumentList "/i `"$env:TEMP\$gstInstaller`" /quiet ADDLOCAL=ALL" -Wait
        Start-Process msiexec.exe -ArgumentList "/i `"$env:TEMP\$gstDevInstaller`" /quiet ADDLOCAL=ALL" -Wait
        
        # Set up environment variables
        $gstPath = "C:\gstreamer\1.0\msvc_x86_64"
        echo "GST_PLUGIN_PATH=$gstPath\lib\gstreamer-1.0" >> $env:GITHUB_ENV
        echo "PKG_CONFIG_PATH=$gstPath\lib\pkgconfig" >> $env:GITHUB_ENV
        echo "$gstPath\bin" >> $env:GITHUB_PATH
    
    - name: Install GStreamer (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install gstreamer gst-plugins-base gst-plugins-good \
          gst-plugins-bad gst-plugins-ugly gst-libav gst-rtsp-server
    
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Check formatting
      run: cargo fmt -- --check
    
    - name: Run clippy
      run: cargo clippy -- -D warnings
    
    - name: Build
      run: cargo build --verbose
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Run integration tests
      run: cargo test --test '*' --verbose
    
    - name: Install Python dependencies
      if: runner.os == 'Linux'
      run: |
        pip3 install -r scripts/requirements.txt || true
    
    - name: Generate test report
      if: runner.os == 'Linux'
      run: |
        python3 scripts/test_runner.py --all --json --html || true
    
    - name: Upload test reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-reports-${{ matrix.os }}-${{ matrix.rust }}
        path: test-reports/

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    # Use default stable Rust toolchain (already installed on runner)
    
    - name: Install GStreamer
      run: |
        sudo apt-get update
        sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev \
          gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
          gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly \
          gstreamer1.0-libav libgstrtspserver-1.0-dev
    
    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin
    
    - name: Generate coverage
      run: cargo tarpaulin --verbose --all-features --workspace --timeout 300 --out Xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./cobertura.xml
        flags: unittests
        name: codecov-umbrella

  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    # Use default stable Rust toolchain (already installed on runner)
    
    - name: Install GStreamer
      run: |
        sudo apt-get update
        sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
    
    - name: Run benchmarks
      run: cargo bench
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: target/criterion/
